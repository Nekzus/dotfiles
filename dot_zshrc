# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path flutter.
# export PATH="$PATH:/home/nekzus/Flutter/flutter/bin"
export PATH=$PATH:/home/nekzus/snap/flutter/common/flutter

# Path dart
# export PATH="/home/nekzus/Flutter/flutter/bin:$PATH"

# Path ttype
export PATH=$PATH:/home/nekzus/.cargo/bin

# Path Chrome
export CHROME_PATH=/usr/bin/google-chrome

# Path android studio.
export ANDROID_STUDIO_HOME=/opt/android-studio

export ANDROID_HOME=/home/nekzus/Android/Sdk

export PATH=$PATH:/home/nekzus/Android/Sdk/tools
export PATH=$PATH:/home/nekzus/Android/Sdk/emulator
export PATH=$PATH:/home/nekzus/Android/Sdk/platform-tools

# Path java.
## export JAVA_HOME=/usr/lib/jvm/jdk-19
   export JAVA_HOME=/usr/lib/jvm/jdk-11.0.1
## export PATH=$PATH:/usr/lib/jvm/jdk-19/bin
   export PATH=$PATH:/usr/lib/jvm/jdk-11.0.1/bin
# Path deno.
export DENO_INSTALL="/home/nekzus/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

# Systemd-user fix
export XDG_RUNTIME_DIR="/run/user/$UID"
export DBUS_SESSION_BUS_ADDRESS="unix:path=${XDG_RUNTIME_DIR}/bus"

# Path oh-my-zsh.
export ZSH="$HOME/.oh-my-zsh"

# Path fly.io cli.
export FLYCTL_INSTALL="/home/nekzus/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git sudo history dirhistory copypath copyfile zsh-syntax-highlighting zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias rns="npx react-native start"
alias rna="npx react-native run-android"
alias kubectl="minikube kubectl --"
source ~/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
source ~/powerlevel10k/powerlevel10k.zsh-theme
source /home/nekzus/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# bun completions
[ -s "/home/nekzus/.bun/_bun" ] && source "/home/nekzus/.bun/_bun"

# bun
export BUN_INSTALL="/home/nekzus/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"


# Load Angular CLI autocompletion.
source <(ng completion script)
export PATH="$PATH:/usr/bin/Postman"

# pnpm
export PNPM_HOME="/home/nekzus/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"
# pnpm end

# .NET
# export DOTNET_ROOT=/usr/share/dotnet/
export DOTNET_ROOT=$HOME/dotnet
export PATH=$PATH:$HOME/dotnet
export PATH=$PATH:$HOME/.dotnet:$HOME/.dotnet/tools
# export DOTNET_ROOT=$HOME/.dotnet
# export PATH=$PATH:$HOME/.dotnet:$HOME/.dotnet/tools

# zsh parameter completion for the dotnet CLI

_dotnet_zsh_complete() 
{
  local completions=("$(dotnet complete "$words")")

  # If the completion list is empty, just continue with filename selection
  if [ -z "$completions" ]
  then
    _arguments '*::arguments: _normal'
    return
  fi

  # This is not a variable assignment, don't remove spaces!
  _values = "${(ps:\n:)completions}"
}

compdef _dotnet_zsh_complete dotnet

#OpenSSL
export LD_LIBRARY_PATH="/usr/local/lib/"
# Fig post block. Keep at the bottom of this file.
# [[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"
# Fig pre block. Keep at the top of this file.
# [[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"

if [ -x "$(command -v exa)" ]; then
    alias ls="exa"
    alias la="exa --long --all --group"
fi


# ### SHELL SCRIPTS ###
# o
# # Función para eliminar directorios
# delete_directories() {
#   rm -rf "$@"  # Elimina los directorios especificados
# }

# # Función para abrir el navegador en segundo plano
# open_browser() {
#   brave-browser --incognito "$1" > /dev/null 2>&1 &
# }

# # Función para reemplazar el título en README.md
# replace_readme_title() {
#   local project_name="$1"
#   sed -i "s/# Welcome to #PROJECT_TITLE#/# Welcome to $project_name/" README.md || return 1
# }

# # Función para clonar el repositorio, configurar y ejecutar el proyecto
# setup_and_run_project() {
#   local project_name="$1"
#   local github_repo="$2"  # URL del repositorio
#   local port="$3"  # Puerto para la URL

#   # Clonar el repositorio
#   git clone "$github_repo" "$project_name" || return 1

#   # Cambiar al directorio del proyecto
#   cd "$project_name" || return 1

#   # Actualizar el título del proyecto en el archivo README.md
#   replace_readme_title "$project_name" || return 1

#   # Modificar el nombre en package.json con jq
#   jq '.name = "'"$project_name"'"' package.json > temp.json && mv temp.json package.json

#   # Eliminar directorios innecesarios
#   delete_directories .git .next node_modules

#   # Instalar dependencias del proyecto
#   bun install || return 1  # o yarn install si prefieres usar Yarn

#   # Abrir el proyecto en Visual Studio Code Insiders
#   code-insiders . -r &

#   # Esperar un momento para que se inicie el servidor
#   sleep 5  # Ajusta el tiempo de espera según tus necesidades

#   # Abrir el proyecto en Brave en modo incógnito en segundo plano
#   open_browser "http://localhost:$port"  # Cambia el puerto si es necesario

#   # Ejecutar el proyecto en modo desarrollo
#   bun run dev || return 1  # o yarn dev si prefieres usar Yarn
# }

# # Project Next.js
# nextbun() {
#   if [ $# -ne 1 ]; then
#     echo "Usage: nextbun <nombre_proyecto>"
#     return 1
#   fi

#   local project_name="$1"
#   local github_repo="https://github.com/Nekzus/template-nextjs-bun.git"  # URL del repositorio fijo
#   local port="3000"  # Puerto para la URL

#   setup_and_run_project "$project_name" "$github_repo" "$port" || {
#     echo "Error: No se pudo configurar y ejecutar el proyecto."
#     return 1
#   }
# }


# # Project React.js
# reactbun() {
#   if [ $# -ne 1 ]; then
#     echo "Usage: reactbun <nombre_proyecto>"
#     return 1
#   fi

#   local project_name="$1"
#   local github_repo="https://github.com/Nekzus/template-reactjs-bun.git"  # URL del repositorio fijo
#   local port="5173"  # Puerto para la URL

#   setup_and_run_project "$project_name" "$github_repo" "$port" || {
#     echo "Error: No se pudo configurar y ejecutar el proyecto."
#     return 1
#   }
# }

# # Función para detectar el administrador de paquetes
# detect_package_manager() {
#   package_manager="bun"  # Establece un valor predeterminado
  
#   if [ -f "package-lock.json" ]; then
#     package_manager="npm"
#   elif [ -f "pnpm-lock.yaml" ]; then
#     package_manager="pnpm"
#   elif [ -f "yarn.lock" ]; then
#     package_manager="yarn"
#   fi
# }

# # Función para solicitar confirmación del usuario
# confirm() {
#   read -q "choice?¿Estás seguro de que deseas continuar? (y/n): "
#   echo
#   [ "$choice" = "y" ] || [ "$choice" = "Y" ]
# }

# # Función para instalar dependencias si no existe la carpeta node_modules
# install_dependencies() {
#   if [ ! -d "node_modules" ]; then
#     detect_package_manager
#     echo "Instalando dependencias con $package_manager en $PWD..."
#     $package_manager install
#   fi
# }

# # Función para liberar puertos comunes en modo desarrollo
# release_ports() {
#   local ports=("3000" "4200" "5173" "8000" "8080")

#   for port in "${ports[@]}"; do
#     if lsof -i :$port >/dev/null 2>&1; then
#       echo "Liberando puerto $port..."
#       kill $(lsof -t -i :$port)
#     fi
#   done

#   echo "Puertos liberados."
# }

# Función para abrir un proyecto en Visual Studio Code Insiders y ejecutarlo en modo desarrollo
# openpj() {

#   if [ ! -f "package.json" ]; then
#     echo "No se encontró un archivo package.json en la ubicación actual."
#     echo "Asegúrate de estar en la carpeta del proyecto antes de ejecutar este script."
#     return 1
#   fi
   
#   # Llama a la función confirm antes de ejecutar acciones
#   if ! confirm; then
#     echo "Operación cancelada."
#     return

#   fi

#   echo "Abriendo proyecto en Visual Studio Code Insiders..."
#   code-insiders . -r

#   install_dependencies

#   echo "Iniciando servidor de desarrollo en $PWD..."
#   detect_package_manager
#   $package_manager run dev
  
#   echo "Proyecto abierto y servidor en ejecución"
#   # Liberar puertos antes de salir
#   release_ports
# }

























